{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar replace = require( '@stdlib/string-replace' );\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n/**\n* Parses a string representing a complex number into a complex-like object.\n*\n* ## Notes\n*\n* -   The function returns an object containing the following properties:\n*\n*     -   **re**: real component\n*     -   **im**: imaginary component\n*\n* @param {string} str - input string\n* @returns {ComplexLike} an object containing real and imaginary parts\n*\n* @example\n* var str = '4 + 6i';\n*\n* var z = parse( str );\n* // returns { 're': 4, 'im': 6 }\n*/\nfunction parse( str ) {\n\tvar imaginaryParts = [];\n\tvar currentToken = '';\n\tvar isImaginary;\n\tvar realParts = [];\n\tvar parts = [];\n\tvar valid = true;\n\tvar value;\n\tvar part;\n\tvar re = 0;\n\tvar im = 0;\n\n\tvar i;\n\tif ( typeof str !== 'string' ) {\n\t\treturn null;\n\t}\n\n\tstr = replace( str, ' ', '' );\n\tfor ( i = 0; i < str.length; i++ ) {\n\t\tif ( (str[i] === '+' || str[i] === '-') && i !== 0 && str[i - 1] !== 'e' ) {\n\t\t\tparts.push(currentToken);\n\t\t\tcurrentToken = '';\n\t\t} else if ( i === str.length - 1 ) {\n\t\t\tcurrentToken += str[i];\n\t\t\tparts.push(currentToken);\n\t\t}\n\t\tcurrentToken += str[i];\n\t}\n\n\tfor ( i = 0; i < parts.length; i++ ) { // Check for invalid parts...\n\t\tpart = parts[ i ];\n\t\tisImaginary = false;\n\n\t\t// Check for Iota on either sides:\n\t\tif ( part[0] === 'i' ) {\n\t\t\tpart = part.slice( 1 );\n\t\t\tisImaginary = true;\n\t\t} else if ( part[part.length - 1] === 'i' ) {\n\t\t\tpart = part.slice( 0, part.length - 1 );\n\t\t\tisImaginary = true;\n\t\t}\n\n\t\tvalue = Number( part );\n\t\tif ( isNaN( value ) && part !== 'NaN' && part !== '+NaN' && part !== '-NaN' ) {\n\t\t\tvalid = false;\n\t\t\tbreak;\n\t\t}\n\n\t\tif ( isImaginary ) {\n\t\t\timaginaryParts.push( value );\n\t\t}\n\t\telse {\n\t\t\trealParts.push( value );\n\t\t}\n\t}\n\n\tif ( !valid ) {\n\t\treturn null;\n\t}\n\n\tfor ( i = 0; i < realParts.length; i++ ) {\n\t\tre += realParts[i];\n\t}\n\tfor ( i = 0; i < imaginaryParts.length; i++ ) {\n\t\tim += imaginaryParts[i];\n\t}\n\n\treturn {\n\t\t're': re,\n\t\t'im': im\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = parse;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a string representing a complex number into a complex like object.\n*\n* @module @stdlib/complex-base-parse\n*\n* @example\n* var parse = require( '@stdlib/complex-base-parse' );\n*\n* var str = '4 + 6i';\n*\n* var z = parse( str );\n* // returns { 're': 4, 'im': 6 }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,wBAAyB,EAC5CC,EAAS,QAAS,qBAAsB,EAwB5C,SAASC,EAAOC,EAAM,CACrB,IAAIC,EAAiB,CAAC,EAClBC,EAAe,GACfC,EACAC,EAAY,CAAC,EACbC,EAAQ,CAAC,EACTC,EAAQ,GACRC,EACAC,EACAC,EAAK,EACLC,EAAK,EAELC,EACJ,GAAK,OAAOX,GAAQ,SACnB,OAAO,KAIR,IADAA,EAAMH,EAASG,EAAK,IAAK,EAAG,EACtBW,EAAI,EAAGA,EAAIX,EAAI,OAAQW,KACtBX,EAAIW,CAAC,IAAM,KAAOX,EAAIW,CAAC,IAAM,MAAQA,IAAM,GAAKX,EAAIW,EAAI,CAAC,IAAM,KACpEN,EAAM,KAAKH,CAAY,EACvBA,EAAe,IACJS,IAAMX,EAAI,OAAS,IAC9BE,GAAgBF,EAAIW,CAAC,EACrBN,EAAM,KAAKH,CAAY,GAExBA,GAAgBF,EAAIW,CAAC,EAGtB,IAAMA,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAAM,CAcpC,GAbAH,EAAOH,EAAOM,CAAE,EAChBR,EAAc,GAGTK,EAAK,CAAC,IAAM,KAChBA,EAAOA,EAAK,MAAO,CAAE,EACrBL,EAAc,IACHK,EAAKA,EAAK,OAAS,CAAC,IAAM,MACrCA,EAAOA,EAAK,MAAO,EAAGA,EAAK,OAAS,CAAE,EACtCL,EAAc,IAGfI,EAAQT,EAAQU,CAAK,EAChB,MAAOD,CAAM,GAAKC,IAAS,OAASA,IAAS,QAAUA,IAAS,OAAS,CAC7EF,EAAQ,GACR,KACD,CAEKH,EACJF,EAAe,KAAMM,CAAM,EAG3BH,EAAU,KAAMG,CAAM,CAExB,CAEA,GAAK,CAACD,EACL,OAAO,KAGR,IAAMK,EAAI,EAAGA,EAAIP,EAAU,OAAQO,IAClCF,GAAML,EAAUO,CAAC,EAElB,IAAMA,EAAI,EAAGA,EAAIV,EAAe,OAAQU,IACvCD,GAAMT,EAAeU,CAAC,EAGvB,MAAO,CACN,GAAMF,EACN,GAAMC,CACP,CACD,CAKAd,EAAO,QAAUG,ICvFjB,IAAIa,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "replace", "Number", "parse", "str", "imaginaryParts", "currentToken", "isImaginary", "realParts", "parts", "valid", "value", "part", "re", "im", "i", "main"]
}
