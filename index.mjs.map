{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-replace';\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Parses a string representing a complex number into a complex-like object.\n*\n* ## Notes\n*\n* -   The function returns an object containing the following properties:\n*\n*     -   **re**: real component\n*     -   **im**: imaginary component\n*\n* @param {string} str - input string\n* @returns {ComplexLike} an object containing real and imaginary parts\n*\n* @example\n* var str = '4 + 6i';\n*\n* var z = parse( str );\n* // returns { 're': 4, 'im': 6 }\n*/\nfunction parse( str ) {\n\tvar imaginaryParts = [];\n\tvar currentToken = '';\n\tvar isImaginary;\n\tvar realParts = [];\n\tvar parts = [];\n\tvar valid = true;\n\tvar value;\n\tvar part;\n\tvar re = 0;\n\tvar im = 0;\n\n\tvar i;\n\tif ( typeof str !== 'string' ) {\n\t\treturn null;\n\t}\n\n\tstr = replace( str, ' ', '' );\n\tfor ( i = 0; i < str.length; i++ ) {\n\t\tif ( (str[i] === '+' || str[i] === '-') && i !== 0 && str[i - 1] !== 'e' ) {\n\t\t\tparts.push( currentToken );\n\t\t\tcurrentToken = '';\n\t\t} else if ( i === str.length - 1 ) {\n\t\t\tcurrentToken += str[ i ];\n\t\t\tparts.push( currentToken );\n\t\t}\n\t\tcurrentToken += str[ i ];\n\t}\n\n\tfor ( i = 0; i < parts.length; i++ ) { // Check for invalid parts...\n\t\tpart = parts[ i ];\n\t\tisImaginary = false;\n\n\t\t// Check for Iota on either sides:\n\t\tif ( part[0] === 'i' ) {\n\t\t\tpart = part.slice( 1 );\n\t\t\tisImaginary = true;\n\t\t} else if ( part[part.length - 1] === 'i' ) {\n\t\t\tpart = part.slice( 0, part.length - 1 );\n\t\t\tisImaginary = true;\n\t\t}\n\n\t\tvalue = Number( part );\n\t\tif ( isNaN( value ) && part !== 'NaN' && part !== '+NaN' && part !== '-NaN' ) {\n\t\t\tvalid = false;\n\t\t\tbreak;\n\t\t}\n\n\t\tif ( isImaginary ) {\n\t\t\timaginaryParts.push( value );\n\t\t}\n\t\telse {\n\t\t\trealParts.push( value );\n\t\t}\n\t}\n\n\tif ( !valid ) {\n\t\treturn null;\n\t}\n\n\tfor ( i = 0; i < realParts.length; i++ ) {\n\t\tre += realParts[i];\n\t}\n\tfor ( i = 0; i < imaginaryParts.length; i++ ) {\n\t\tim += imaginaryParts[i];\n\t}\n\n\treturn {\n\t\t're': re,\n\t\t'im': im\n\t};\n}\n\n\n// EXPORTS //\n\nexport default parse;\n"],"names":["parse","str","isImaginary","value","part","i","imaginaryParts","currentToken","realParts","parts","valid","re","im","replace","length","push","slice","Number","isNaN"],"mappings":";;+KA+CA,SAASA,EAAOC,GACf,IAEIC,EAIAC,EACAC,EAIAC,EAXAC,EAAiB,GACjBC,EAAe,GAEfC,EAAY,GACZC,EAAQ,GACRC,GAAQ,EAGRC,EAAK,EACLC,EAAK,EAGT,GAAoB,iBAARX,EACX,OAAO,KAIR,IADAA,EAAMY,EAASZ,EAAK,IAAK,IACnBI,EAAI,EAAGA,EAAIJ,EAAIa,OAAQT,IACX,MAAXJ,EAAII,IAAyB,MAAXJ,EAAII,IAAqB,IAANA,GAA0B,MAAfJ,EAAII,EAAI,GAGlDA,IAAMJ,EAAIa,OAAS,IAC9BP,GAAgBN,EAAKI,GACrBI,EAAMM,KAAMR,KAJZE,EAAMM,KAAMR,GACZA,EAAe,IAKhBA,GAAgBN,EAAKI,GAGtB,IAAMA,EAAI,EAAGA,EAAII,EAAMK,OAAQT,IAAM,CAcpC,GAZAH,GAAc,EAGG,OAJjBE,EAAOK,EAAOJ,IAIJ,IACTD,EAAOA,EAAKY,MAAO,GACnBd,GAAc,GACuB,MAA1BE,EAAKA,EAAKU,OAAS,KAC9BV,EAAOA,EAAKY,MAAO,EAAGZ,EAAKU,OAAS,GACpCZ,GAAc,GAGfC,EAAQc,EAAQb,GACXc,MAAOf,IAAoB,QAATC,GAA2B,SAATA,GAA4B,SAATA,EAAkB,CAC7EM,GAAQ,EACR,KACA,CAEIR,EACJI,EAAeS,KAAMZ,GAGrBK,EAAUO,KAAMZ,EAEjB,CAED,IAAMO,EACL,OAAO,KAGR,IAAML,EAAI,EAAGA,EAAIG,EAAUM,OAAQT,IAClCM,GAAMH,EAAUH,GAEjB,IAAMA,EAAI,EAAGA,EAAIC,EAAeQ,OAAQT,IACvCO,GAAMN,EAAeD,GAGtB,MAAO,CACNM,GAAMA,EACNC,GAAMA,EAER"}